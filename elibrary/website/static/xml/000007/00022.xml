<?xml version='1.0' encoding='UTF-8'?>
<OBJECT>
  <HIDDENTEXT>
    <PAGECOLUMN>
      <REGION>
        <PARAGRAPH>
          <LINE>
            <WORD coords="202,176,996,150">the domain component. Notice, that the third node of the name</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,216,999,187">space (customer) is duplicated for all of the layers-this is indicative</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,251,999,225">of a technically partitioned architecture, where the domain is spread</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,283,606,259">across all layers of the architecture.</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,336,998,311">One of the powerful features of the layered architecture style is the</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,373,999,347">separation of concerns among components. Components within a</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,442,997,416">example, components in the presentation layer deal only with pre-</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,478,999,452">sentation logic, whereas components residing in the business layer</WORD>
          </LINE>
          <LINE>
            <WORD coords="197,514,1001,484">deal only with business logic. This type of component classification</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,547,999,521">makes it easy to build effective roles and responsibility models</WORD>
          </LINE>
          <LINE>
            <WORD coords="195,583,999,555">into your architecture, and makes it easy to develop, test, govern,</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,617,992,591">and maintain applications using this architecture style when well</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,652,996,626">defined component interfaces and contracts are used between layers.</WORD>
          </LINE>
          <LINE>
            <WORD coords="197,737,428,696">Key Concepts</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,789,999,763">In this architecture style, layers can be either open or closed.Notice</WORD>
          </LINE>
          <LINE>
            <WORD coords="195,827,1001,799">in Figure 3-2 that each layer in the architecture is marked as being</WORD>
          </LINE>
          <LINE>
            <WORD coords="197,862,1001,833">closed. A closed layer means that as a request moves from layer to</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,896,999,870">layer, it must go through the layer right below it to get to the next</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,932,999,906">layer below that one. For example, a request originating from the</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,968,999,941">presentation layer must first go through the business layer and then</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1001,930,975">to the persistence layer before finally hitting the database layer.</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1052,999,1026">So why not allow the presentation layer direct access to either the</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1087,999,1061">persistence layer or database layer? After all, direct database access</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1123,999,1097">from the presentation layer is much faster than going through a</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1155,998,1131">bunch of unnecessary layers just to retrieve or save database infor-</WORD>
          </LINE>
          <LINE>
            <WORD coords="197,1191,1001,1168">mation. The answer to this question lies in a key concept known as</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1228,405,1202">layers of isolation.</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1279,1001,1251">The layers of isolation concept means that changes made in one</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1314,999,1288">layer of the architecture generally don't impact or affect components</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1350,999,1324">in other layers: the change is isolated to the components within that</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1384,1001,1359">layer, and possibly another associated layer such as a persistence</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1419,999,1393">layer containing SQL).If you allow the presentation layer direct</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1455,999,1429">access to the persistence layer, then changes made to SQL within</WORD>
          </LINE>
          <LINE>
            <WORD coords="201,1489,999,1464">the persistence layer would impact both the business layer and the</WORD>
          </LINE>
          <LINE>
            <WORD coords="199,1528,999,1496">presentation layer, thereby producing a very tightly coupled applica-</WORD>
          </LINE>
          <LINE>
            <WORD coords="197,1564,1001,1532">tion with lots of interdependencies between components. This type</WORD>
          </LINE>
          <LINE>
            <WORD coords="810,1691,1005,1655">Key Concepts|17</WORD>
          </LINE>
        </PARAGRAPH>
      </REGION>
    </PAGECOLUMN>
  </HIDDENTEXT>
</OBJECT>
