<?xml version='1.0' encoding='UTF-8'?>
<OBJECT>
  <HIDDENTEXT>
    <PAGECOLUMN>
      <REGION>
        <PARAGRAPH>
          <LINE>
            <WORD coords="79,115,1621,82">For a given algorithm, we can represent the best, worst and average cases in the form of</WORD>
          </LINE>
          <LINE>
            <WORD coords="74,167,1485,126">expressions. As an example, let f(n) be the function which represents the given algorithm..</WORD>
          </LINE>
          <LINE>
            <WORD coords="638,266,1062,220">fn=n+500,for worst case</WORD>
          </LINE>
          <LINE>
            <WORD coords="79,419,1619,380">Similarly for the average case. The expression defines the inputs with which the algorithm takes</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,465,670,426">the average running time (or memory)</WORD>
          </LINE>
          <LINE>
            <WORD coords="74,612,584,568">1.13 Asymptotic Notation</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,706,1621,667">Having the expressions for the best, average and worst cases, for all three cases we need to</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,752,1621,713">identify the upper and lower bounds. To represent these upper and lower bounds, we need some.</WORD>
          </LINE>
          <LINE>
            <WORD coords="79,795,1619,763">kind of syntax, and that is the subject of the following discussion. Let us assume that the given</WORD>
          </LINE>
          <LINE>
            <WORD coords="74,843,892,807">algorithm is represented in the form of function f(n)</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,988,1051,944">1.14 Big-O Notation [Upper Bounding Function]</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,1082,1619,1043">This notation gives the tight upper bound of the given function. Generally, it is represented as f(n)</WORD>
          </LINE>
          <LINE>
            <WORD coords="74,1125,1619,1091">= O(g(n)). That means, at larger values of n, the upper bound of f(n) is g(n). For example, if f(n)</WORD>
          </LINE>
          <LINE>
            <WORD coords="72,1180,1622,1139">= n4 + 100n2 + 10n + 50 is the given algorithm, then n4 is g(n). That means g(n) gives the.</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,1224,917,1192">maximum rate of growth for f(n)at larger values of n</WORD>
          </LINE>
          <LINE>
            <WORD coords="76,1313,425,1274">Rate of Growth</WORD>
          </LINE>
          <LINE>
            <WORD coords="956,1341,1093,1281">cg(n)</WORD>
          </LINE>
          <LINE>
            <WORD coords="1300,1421,1414,1359">f(n)</WORD>
          </LINE>
          <LINE>
            <WORD coords="527,1955,545,1923">-</WORD>
          </LINE>
          <LINE>
            <WORD coords="1317,2053,1624,2008">Input Size,n</WORD>
          </LINE>
          <LINE>
            <WORD coords="492,2083,563,2046">no</WORD>
          </LINE>
        </PARAGRAPH>
      </REGION>
    </PAGECOLUMN>
  </HIDDENTEXT>
</OBJECT>
